Hi-Fi Instructions

Original Source: https://github.com/djpohly/linux
	 (Linux Kernel 3.2.0+)

Our Source: http://gitweb/cyber-prov/hifi-2.6.32.git
    (Red Hat Enterprise Linux Kernel 2.6.32)

== Kernel setup ==
The first step is to build the actual provenanced kernel and install it on the VM.  If you are unfamiliar with how to build the kernel, you should probably just look it up.

On CentOS 6, this routine should work if you have the requisite dependencies:

Redhat
# yum install gcc ncurses-devel rpmdevtools yum-utils qt3-devel libXi-devel kernel-devel libattr-devel libuuid-devel db4-devel zlib-devel
Ubuntu
# apt-get install subversion build-essential uuid-dev attr-dev zlib1g-dev ncurses-dev

# make menuconfig (Select "Hi-Fi" under Security Options, Disable SELinux, Make sure Hi-Fi is the default LSM at the bottom of the Security Options).
# make -jN (N = 2*(# of cores on system))
# make modules_install install

This will automatically add a boot entry in legacy grub.  Go and edit the grub.conf file to make sure that the boot option isn't hidden and you have enough time to pick a kernel.

Have some Redhat Links:
http://wiki.centos.org/HowTos/I_need_the_Kernel_Source
https://fedoraproject.org/wiki/Building_a_custom_kernel?rd=Docs/CustomKernel
https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/3/html/System_Administration_Guide/s1-custom-kernel-modularized.html


== VM setup ==
Now we need to prepare the virtual machine which will be running the provenanced kernel.  The crux of this step is getting the user-space provenance collector to run at startup.  The kernel module exposes provenance as a file in a debugfs filesystem.  Choose a location for mounting this filesystem, such as/debug or /sys/kernel/debug.  Create this directory and add it to /etc/fstab so it is mounted at startup:

# mkdir /sys/kernel/debug
# echo "debugfs /sys/kernel/debug debugfs defaults 0 0" >> /etc/fstab

Compile the uprovd daemon from the tools/ directory and install it somewhere in your path.  In order to avoid provenance recursion, mark it as exempt from provenance collection.
$ cd tools
$ make uprovd
$ su
# cp uprovd /usr/bin/
# setfattr -n security.hifi -v opaque /usr/bin/uprovd
# chmod +s /usr/bin/uprovd

Configure your system to run uprovd at startup by adding a line to /etc/rc.local:

uprovd /sys/kernel/debug/provenance0 /var/log/prov-$(date +%F-%T).log.gz 5000000

This will flush provenance from the kernel relay every 5 seconds (5000000 microseconds) to a gzipped log file stamped with the system boot time.  The choice of a time interval is critical - all data is stored in the relay during this interval, and overflowing the relay will cause the kernel to panic.  (Note: You can modify the size of the relay in the source code.  It is a set of variables at the top of security/hifi/hifi_lsm.c).

Shut down the virtual machine.

== Provenance setup ==
In order to bootstrap provenance for a system that has already been installed, we need to generate events representing what has already happened.  The provenance from previous runs of the system has already been lost, and all that remains is the filesystem and its properties.  This section describes making a "Big Bang" for the filesystems, which generates creation events for the already-existing file structure.  Creation events are important for two reasons: they record what inodes have been allocated, and they map these to a directory hierarchy in the provenance record.  Because of this, the provenance monitor will '''refuse to mount''' a filesystem which has not been run through this tool, giving the error:

"Missing or malformed UUID label on filesystem.  If this is your root filesystem, kernel may panic or drop to inited."

The way to generate a provenance Big Bang for the filesystem is to use the pbang utility.  This cannot be done from within the to-be-provenanced machine, since <code>pbang</code> requires exclusive access to the filesystem so that it can take a consistent snapshot.  Instead, we boot from a live CD and run the utility from there.  This will mount the filesystem and create a provenance log describing its structure.  This log will be compressed and injected into the filesystem as prov-bang.log.gz, complete with an entry for itself.

== Big Bang ==
Start by booting the virtual machine from the live CD ISO.  Be sure to install Subversion, the C toolchain, and the libraries and headers for libattr, libuuid, and zlib.  On Ubuntu:

MITLL Instructions:
Add to /etc/yum.conf:
    proxy=http://llproxy.llan.ll.mit.edu:8080

CentOS Dependencies:
$ sudo yum install gcc kernel-devel libattr-devel libuuid-devel db4-devel zlib-devel

Ubuntu Dependencies:
$ sudo apt-get install subversion build-essential uuid-dev attr-dev zlib1g-dev

$ svn co https://siissvn.cse.psu.edu/svn/project/provenance/tools
$ cd tools
$ make pbang

At this point, you need to know what the device and filesystem type are for your filesystem.  If your distro's installer shielded you from this fascinating information, you can likely uncover it with parted.  In the most common case, this command will show you what you 
